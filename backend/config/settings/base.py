"""
Django settings for enterpriseviz project.

Generated by 'django-admin startproject' using Django 3.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

import environ

BASE_DIR = Path(__file__).resolve(strict=True).parent.parent.parent

APPS_DIR = BASE_DIR / "config"
env = environ.Env()

READ_DOT_ENV_FILE = env.bool("DJANGO_READ_DOT_ENV_FILE", default=False)
if READ_DOT_ENV_FILE:
    # OS environment variables take precedence over variables from .env
    env.read_env(str(BASE_DIR / ".env"))

# GENERAL
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#debug
DEBUG = env.bool("DJANGO_DEBUG", False)

# Internationalization
# https://docs.djangoproject.com/en/dev/ref/settings/#language-code
LANGUAGE_CODE = "en-us"

# Local time zone. Choices are
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# though not all of them may be available with every OS.
# In Windows, this must be set to your system time zone.
TIME_ZONE = "America/Los_Angeles"

# https://docs.djangoproject.com/en/dev/ref/settings/#use-i18n
USE_I18N = False

# https://docs.djangoproject.com/en/dev/ref/settings/#site-id
SITE_ID = 1

# https://docs.djangoproject.com/en/dev/ref/settings/#use-tz
USE_TZ = False

DATETIME_FORMAT = 'M j, Y h:i A'
DATE_FORMAT = 'M j, Y'
DATE_INPUT_FORMATS = ['YYYY-mm-dd']

TIME_FORMAT = "H:i"
USE_L10N = False

# URLS
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#root-urlconf
ROOT_URLCONF = "config.urls"
# https://docs.djangoproject.com/en/dev/ref/settings/#wsgi-application
WSGI_APPLICATION = "config.wsgi.application"
URL_PREFIX = None

# APPS
# ------------------------------------------------------------------------------
DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

]
THIRD_PARTY_APPS = [
    'django_htmx',
    'django_tasks',
    'django_celery_beat',
    'django_celery_results',
    'social_django',
    'django_tables2',
    'django_filters',
    'django_tasks.backends.database',
]

LOCAL_APPS = [
    'app'
    # Your stuff: custom apps go here
]
# https://docs.djangoproject.com/en/dev/ref/settings/#installed-apps
INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'django_htmx.middleware.HtmxMiddleware',
    'config.customArcGIS.MySocialAuthExceptionMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
    "app.middleware.RequestContextLogMiddleware",
]

AUTHENTICATION_BACKENDS = (
    'config.customArcGIS.PortalOAuth2',

    'django.contrib.auth.backends.ModelBackend',
)

# STATIC
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#static-root
STATIC_ROOT = str(BASE_DIR / "staticfiles")
# https://docs.djangoproject.com/en/dev/ref/settings/#static-url
STATIC_URL = f"/static/"
# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#std:setting-STATICFILES_DIRS
STATICFILES_DIRS = (str(BASE_DIR.joinpath("static")),)
# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#staticfiles-finders
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

APPEND_SLASH = True

LOGIN_URL = "/enterpriseviz/login/"
LOGIN_REDIRECT_URL = "/enterpriseviz/"
LOGOUT_REDIRECT_URL = "/enterpriseviz/"

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',  # 0
    'social_core.pipeline.social_auth.social_uid',  # 1
    'social_core.pipeline.social_auth.auth_allowed',  # 2
    'config.customArcGIS.user_role',
    'social_core.pipeline.social_auth.social_user',  # 3
    'social_core.pipeline.user.get_username',  # 4
    'social_core.pipeline.user.create_user',
    # 'social_core.pipeline.social_auth.associate_by_email',  # 5
    'social_core.pipeline.social_auth.associate_user',  # 6
    'social_core.pipeline.social_auth.load_extra_data',  # 7
    'social_core.pipeline.user.user_details',  # 8
)

SOCIAL_AUTH_ARCGIS_KEY = env('SOCIAL_AUTH_ARCGIS_KEY')
SOCIAL_AUTH_ARCGIS_SECRET = env('SOCIAL_AUTH_ARCGIS_SECRET')
SOCIAL_AUTH_ARCGIS_URL = env('SOCIAL_AUTH_ARCGIS_URL')
ARCGIS_USER_ROLE = env('ARCGIS_USER_ROLE')
USE_SERVICE_USAGE_REPORT = env.bool("USE_SERVICE_USAGE_REPORT", default=True)

# MEDIA
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#media-root
MEDIA_ROOT = "media/"
# https://docs.djangoproject.com/en/dev/ref/settings/#media-url
MEDIA_URL = f"/media/"

# TEMPLATES
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#templates
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
            'libraries': {
                'filter_tags': 'app.templatetags.filter',
            }
        },
    },
]

# SECURITY
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#session-cookie-httponly
SESSION_COOKIE_HTTPONLY = True
# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-httponly
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SECURE = True
# https://docs.djangoproject.com/en/dev/ref/settings/#x-frame-options
X_FRAME_OPTIONS = "DENY"

# ADMIN
# ------------------------------------------------------------------------------
# Django Admin URL.
ADMIN_URL = "admin/"
WEBHOOK_URL = "webhook/"
WEBHOOK_SECRET = env("WEBHOOK_SECRET", default="your_secure_secret_here")
# https://docs.djangoproject.com/en/dev/ref/settings/#admins
ADMINS = [()]
# https://docs.djangoproject.com/en/dev/ref/settings/#managers
MANAGERS = ADMINS
# https://cookiecutter-django.readthedocs.io/en/latest/settings.html#other-environment-settings
# Force the `admin` sign in process to go through the `django-allauth` workflow
DJANGO_ADMIN_FORCE_ALLAUTH = env.bool("DJANGO_ADMIN_FORCE_ALLAUTH", default=False)

# LOGGING
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#logging
# See https://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    'filters': {
        'combined_context_filter': { # Renamed for clarity
            '()': 'app.log_handlers.CombinedContextFilter',
        }
    },
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {asctime} {name}: {message}",
            "style": "{",
        },
        "database": {
            "format": "{message}",
            "style": "{",
        }
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
            'filters': ['combined_context_filter'],  # Also filter console output for context
        },
        "database": {
            "level": "DEBUG",
            "class": "app.log_handlers.DatabaseLogHandler",
            'filters': ['combined_context_filter'],  # Apply the context filter
            "formatter": "database",
        },
    },
    "loggers": {
        "root": {
            "level": "WARNING",
            "handlers": ["console"],
        },
        "django": {
            "handlers": ["console", "database"],
            "level": "WARNING",
            "propagate": True,
        },
        "django.server": {
            "handlers": ["database"],
            "level": "WARNING",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["console"],
            "level": "ERROR",
            "propagate": True,
        },
        "celery": {
            "handlers": ["console", "database"],
            "level": "ERROR",
            "propagate": True,
        },
        "celery.task": {  # Logs from @shared_task or app.task, if not caught by a more specific logger
            "handlers": ["console", "database"],
            "level": "INFO",
            "propagate": False,
        },
        "enterpriseviz": {
            "handlers": ["console", "database"],
            "level": "INFO",
            "propagate": False,
        },
        "enterpriseviz.utils": {
            "handlers": ["console", "database"],
            "level": "WARNING",
            "propagate": False,
        },
        "enterpriseviz.tasks": {
            "handlers": ["console", "database"],
            "level": "INFO",
            "propagate": False,
        },

    },

}

TASKS = {
    "default": {
        "BACKEND": "django_tasks.backends.database.DatabaseBackend"
        # "BACKEND": "django_tasks.backends.immediate.ImmediateBackend"
    }
}

# Celery
# ------------------------------------------------------------------------------
if USE_TZ:
    # https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-timezone
    CELERY_TIMEZONE = TIME_ZONE
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-broker_url
CELERY_BROKER_URL = env("REDIS_URL")
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-result_backend
CELERY_RESULT_BACKEND = 'django-db'
CELERY_RESULT_EXPIRES = 86400
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#result-extended
CELERY_RESULT_EXTENDED = True
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#result-backend-always-retry
# https://github.com/celery/celery/pull/6122
CELERY_RESULT_BACKEND_ALWAYS_RETRY = True
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#result-backend-max-retries
CELERY_RESULT_BACKEND_MAX_RETRIES = 1
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-accept_content
CELERY_ACCEPT_CONTENT = ["json"]
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-task_serializer
CELERY_TASK_SERIALIZER = "json"
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-result_serializer
CELERY_RESULT_SERIALIZER = "json"
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#task-time-limit
# TODO: set to whatever value is adequate in your circumstances
CELERY_TASK_TIME_LIMIT = 5 * 60
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#task-soft-time-limit
# TODO: set to whatever value is adequate in your circumstances
CELERY_TASK_SOFT_TIME_LIMIT = 60
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#beat-scheduler
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#worker-send-task-events
CELERY_WORKER_SEND_TASK_EVENTS = True
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std-setting-task_send_sent_event
CELERY_TASK_SEND_SENT_EVENT = True
CELERY_HIJACK_ROOT_LOGGER = False
